"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[4470],{4137:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(t),m=r,f=d["".concat(s,".").concat(m)]||d[m]||c[m]||i;return t?a.createElement(f,o(o({ref:n},u),{},{components:t})):a.createElement(f,o({ref:n},u))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3797:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=t(7462),r=(t(7294),t(4137));t(4259),t(425);const i={title:"Examples",sidebar_position:5},o=void 0,l={unversionedId:"tools/building/ant/examples",id:"tools/building/ant/examples",title:"Examples",description:"In the following examples are shown some of the most common usages of the ant tasks.",source:"@site/docs/tools/building/ant/examples.mdx",sourceDirName:"tools/building/ant",slug:"/tools/building/ant/examples",permalink:"/docs/tools/building/ant/examples",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/tools/building/ant/examples.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Examples",sidebar_position:5},sidebar:"mainSidebar",previous:{title:"Tasks",permalink:"/docs/tools/building/ant/tasks"}},s={},p=[{value:"Compiling SWCs",id:"compiling-swcs",level:2},{value:"Basics",id:"basics",level:3},{value:"Specify Configuration",id:"specify-configuration",level:3},{value:"Including Libraries",id:"including-libraries",level:3},{value:"Metadata",id:"metadata",level:3},{value:"Compiler Defines",id:"compiler-defines",level:3},{value:"Reports",id:"reports",level:3},{value:"Compiling SWF",id:"compiling-swf",level:2},{value:"Basics",id:"basics-1",level:3},{value:"Compiling with ANEs",id:"compiling-with-anes",level:2},{value:"Packaging AIR",id:"packaging-air",level:2}],u={toc:p};function c(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In the following examples are shown some of the most common usages of the ant tasks. "),(0,r.kt)("h2",{id:"compiling-swcs"},"Compiling SWCs"),(0,r.kt)("p",null,"Note most of the following can be equally applied to ",(0,r.kt)("inlineCode",{parentName:"p"},"mxmlc")," to build a ",(0,r.kt)("inlineCode",{parentName:"p"},"swf"),". "),(0,r.kt)("h3",{id:"basics"},"Basics"),(0,r.kt)("p",null,"Build the all the source in ",(0,r.kt)("inlineCode",{parentName:"p"},"src")," into ",(0,r.kt)("inlineCode",{parentName:"p"},"bin/output.swc")," library:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml",metastring:'title="build.xml"',title:'"build.xml"'},'<?xml version="1.0"?>\n<project name="example" default="compile" >\n\n    <property environment="env."/>\n    <taskdef resource="flexTasks.tasks" classpath="${env.AIR_HOME}/ant"/>\n\n    <property name="output.dir" value="bin" />\n    <property name="source.dir" value="src" />\n\n    <target name="compile">\n        <mkdir dir="${output.dir}"/>\n        <compc output="${output.dir}/output.swc" failonerror="true" maxmemory="1024m">\n            <source-path path-element="${source.dir}"/>\n            <include-sources dir="${source.dir}" includes="*"/>\n        </compc>\n    </target>\n    \n</project>\n')),(0,r.kt)("h3",{id:"specify-configuration"},"Specify Configuration"),(0,r.kt)("p",null,"The following specifies the configuration to use for compilation.\nYou use the ",(0,r.kt)("inlineCode",{parentName:"p"},"load-config")," tag to specify an xml configuration, this can either be a custom one, or one of the 2 default configuration files included with the AIR SDK:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"frameworks/air-config.xml\nframeworks/flex-config.xml\n")),(0,r.kt)("p",null,"These represent build configurations for AIR and FLEX libraries respectively. They include all the references to the AIR and Flex frameworks allowing your code to access the\nstandard framework classes."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml",metastring:'title="build.xml"',title:'"build.xml"'},'<?xml version="1.0"?>\n<project name="example" default="compile" >\n\n    <property environment="env."/>\n    <taskdef resource="flexTasks.tasks" classpath="${env.AIR_HOME}/ant"/>\n\n    <property name="output.dir" value="bin" />\n    <property name="source.dir" value="src" />\n\n    <target name="compile">\n        <mkdir dir="${output.dir}"/>\n        <compc output="${output.dir}/output.swc" failonerror="true" maxmemory="1024m">\n            <load-config filename="${env.AIR_HOME}/frameworks/air-config.xml" />\n            <source-path path-element="${source.dir}"/>\n            <include-sources dir="${source.dir}" includes="*"/>\n        </compc>\n    </target>\n    \n</project>\n')),(0,r.kt)("h3",{id:"including-libraries"},"Including Libraries"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"library-path")," option allows you to add other ",(0,r.kt)("inlineCode",{parentName:"p"},"swc"),"'s as a dependency."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml",metastring:'title="build.xml"',title:'"build.xml"'},'<?xml version="1.0"?>\n<project name="example" default="compile" >\n\n    <property environment="env."/>\n    <taskdef resource="flexTasks.tasks" classpath="${env.AIR_HOME}/ant"/>\n\n    <property name="output.dir" value="bin" />\n    <property name="source.dir" value="src" />\n\n    <target name="compile">\n        <mkdir dir="${output.dir}"/>\n        <compc output="${output.dir}/output.swc" failonerror="true" maxmemory="1024m">\n            <load-config filename="${env.AIR_HOME}/frameworks/air-config.xml" />\n            <source-path path-element="${source.dir}"/>\n            <include-sources dir="${source.dir}" includes="*"/>\n            <library-path file="lib.swc" append="true"/>\n        </compc>\n    </target>\n    \n</project>\n')),(0,r.kt)("p",null,"Or you could include a directory containing a series of ",(0,r.kt)("inlineCode",{parentName:"p"},"swc")," libraries:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml",metastring:'title="build.xml"',title:'"build.xml"'},'<?xml version="1.0"?>\n<project name="example" default="compile" >\n\n    <property environment="env."/>\n    <taskdef resource="flexTasks.tasks" classpath="${env.AIR_HOME}/ant"/>\n\n    <property name="output.dir" value="bin" />\n    <property name="source.dir" value="src" />\n    <property name="libraries.dir" value="libs" />\n\n    <target name="compile">\n        <mkdir dir="${output.dir}" />\n        <compc output="${output.dir}/output.swc" failonerror="true" maxmemory="1024m">\n            <load-config filename="${env.AIR_HOME}/frameworks/air-config.xml" />\n            <source-path path-element="${source.dir}"/>\n            <include-sources dir="${source.dir}" includes="*"/>\n            <library-path dir="${libraries.dir}" append="true">\n                <include name="*.swc" />\n            </library-path>\n        </compc>\n    </target>\n    \n</project>\n')),(0,r.kt)("h3",{id:"metadata"},"Metadata"),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"keep-as3-metadata")," tag to specify the metadata tags to keep in the compiled code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml",metastring:'title="build.xml"',title:'"build.xml"'},'<?xml version="1.0"?>\n<project name="example" default="compile" >\n\n    <property environment="env."/>\n    <taskdef resource="flexTasks.tasks" classpath="${env.AIR_HOME}/ant"/>\n\n    <property name="output.dir" value="bin" />\n    <property name="source.dir" value="src" />\n\n    <target name="compile">\n        <mkdir dir="${output.dir}" />\n        <compc output="${output.dir}/output.swc" failonerror="true" maxmemory="1024m">\n            <load-config filename="${env.AIR_HOME}/frameworks/air-config.xml" />\n            <source-path path-element="${source.dir}"/>\n            <include-sources dir="${source.dir}" includes="*"/>\n            <keep-as3-metadata name="Inject" />\n            <keep-as3-metadata name="PostConstruct" />\n        </compc>\n    </target>\n    \n</project>\n')),(0,r.kt)("h3",{id:"compiler-defines"},"Compiler Defines"),(0,r.kt)("p",null,"Compiler definitions allow you to pass in values into your code at compilation time."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml",metastring:'title="build.xml"',title:'"build.xml"'},'<?xml version="1.0"?>\n<project name="example" default="compile" >\n\n    <property environment="env."/>\n    <taskdef resource="flexTasks.tasks" classpath="${env.AIR_HOME}/ant"/>\n\n    <property name="output.dir" value="bin" />\n    <property name="source.dir" value="src" />\n\n    <property name="version" value="1.0.0" />\n\n    <target name="compile">\n        <mkdir dir="${output.dir}" />\n        <compc output="${output.dir}/output.swc" failonerror="true" maxmemory="1024m">\n            <load-config filename="${env.AIR_HOME}/frameworks/air-config.xml" />\n            <source-path path-element="${source.dir}"/>\n            <include-sources dir="${source.dir}" includes="*"/>\n            <compiler.define name="CONFIG::VERSION" value="\'${version}\'" />\n        </compc>\n    </target>\n    \n</project>\n')),(0,r.kt)("p",null,"Then in your actionscript:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-actionscript",metastring:'title="Main.as"',title:'"Main.as"'},"package \n{\n    import flash.display.Sprite;\n\n    public class MyApp extends Sprite\n    {\n        public static const VERSION : String = CONFIG::VERSION;\n        \n        public function Main():void \n        {\n            trace( VERSION ); // outputs 1.0.0 as defined in the build script\n        }\n    }\n}\n")),(0,r.kt)("h3",{id:"reports"},"Reports"),(0,r.kt)("p",null,"You can output a few reports and the configuration from the task to analyse the result of the compilation. These are passed directly as attributes on the ",(0,r.kt)("inlineCode",{parentName:"p"},"compc")," task"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"dump-config"),": write a file containing all currently set configuration values;"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"size-report"),": output an XML-formatted report detailing the size of all code and data;"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"link-report"),": output a XML-formatted report of all definitions linked;")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},'    <compc ...  \n        dump-config="${output.dir}/config.xml" \n        size-report="${output.dir}/sizereport.xml" \n        link-report="${output.dir}/linkreport.xml" >\n')),(0,r.kt)("h2",{id:"compiling-swf"},"Compiling SWF"),(0,r.kt)("p",null,"Most of the above can be applied to the ",(0,r.kt)("inlineCode",{parentName:"p"},"mxmlc")," command to build a swf."),(0,r.kt)("h3",{id:"basics-1"},"Basics"),(0,r.kt)("p",null,"Build the all the source in ",(0,r.kt)("inlineCode",{parentName:"p"},"src")," into ",(0,r.kt)("inlineCode",{parentName:"p"},"bin/output.swf")," library:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml",metastring:'title="build.xml"',title:'"build.xml"'},'<?xml version="1.0"?>\n<project name="example" default="compile" >\n\n    <property environment="env."/>\n    <taskdef resource="flexTasks.tasks" classpath="${env.AIR_HOME}/ant"/>\n\n    <property name="output.dir" value="bin" />\n    <property name="source.dir" value="src" />\n\n    <target name="compile">\n        <mkdir dir="${output.dir}"/>\n        <mxmlc output="${output.dir}/output.swf" failonerror="true" maxmemory="1024m">\n            <load-config filename="${env.AIR_HOME}/frameworks/air-config.xml" />\n            <source-path path-element="${source.dir}"/>\n            <include-sources dir="${source.dir}" includes="*"/>\n        </mxmlc>\n    </target>\n    \n</project>\n')),(0,r.kt)("h2",{id:"compiling-with-anes"},"Compiling with ANEs"),(0,r.kt)("p",null,"ANEs are a special type of library and require additional attention when building your application ",(0,r.kt)("inlineCode",{parentName:"p"},"swf")," / ",(0,r.kt)("inlineCode",{parentName:"p"},"swc"),". An ANE is essentially a SWC to the compilers and should be linked as an external library which will be included when packaging your AIR application using ",(0,r.kt)("inlineCode",{parentName:"p"},"adt"),". "),(0,r.kt)("p",null,"However, if you simply add an ANE as an ",(0,r.kt)("inlineCode",{parentName:"p"},"external-library-path")," it will be ignored. You need to copy and rename these ",(0,r.kt)("inlineCode",{parentName:"p"},".ane")," files to ",(0,r.kt)("inlineCode",{parentName:"p"},".swc")," before compiling in order to correctly compile your ",(0,r.kt)("inlineCode",{parentName:"p"},"swc")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"swf")," that references an ",(0,r.kt)("inlineCode",{parentName:"p"},"ane"),". Fortunately this is easy with Ant:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml",metastring:'title="build.xml"',title:'"build.xml"'},'<?xml version="1.0"?>\n<project name="ane_example" default="compile" >\n\n    <property environment="env."/>\n    <taskdef resource="flexTasks.tasks" classpath="${env.AIR_HOME}/ant"/>\n\n    <property name="output.dir" value="bin" />\n    <property name="source.dir" value="src" />\n    <property name="ane.dir" value="ane" />\n    <property name="ane.swc.dir" value="ane-swc" />\n\n    <target name="create-ane-swc">\n        \x3c!-- Copy ANE files to the ane-swc and rename to .swc --\x3e\n        <delete dir="${ane.swc.dir}" />\n        <copy todir="${ane.swc.dir}">\n            <fileset dir="${ane.dir}">\n                <include name="*.ane" />\n            </fileset>\n            <globmapper from="*.ane" to="*.swc"/>\n        </copy>\n    </target>\n\n    <target name="compile" depends="create-ane-swc" >\n\n        <mkdir dir="${output.dir}"/>\n        <mxmlc output="${output.dir}/output.swf" failonerror="true" maxmemory="1024m">\n            <load-config filename="${env.AIR_HOME}/frameworks/air-config.xml" />\n            <source-path path-element="${source.dir}"/>\n            <include-sources dir="${source.dir}" includes="*"/>\n            <external-library-path dir="${ane.swc.dir}" append="true"> \n                <include name="**/*.swc"/> \n            </external-library-path> \n        </mxmlc>\n\n        <delete dir="${ane.swc.dir}" />\n    </target>\n    \n</project>\n')),(0,r.kt)("h2",{id:"packaging-air"},"Packaging AIR"),(0,r.kt)("p",null,"Packaging an AIR project uses the ",(0,r.kt)("inlineCode",{parentName:"p"},"exec")," Ant task which allows you to call an executable."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},'<exec executable="${air.adt}" failonerror="true">\n    <arg line="-package"/>\n    <arg line="-storetype pkcs12"/>\n    <arg line="-keystore certificate.p12"/>\n    <arg line="-storepass ${password}"/>\n    <arg line="${output.dir}/MyApp.air"/>\n    <arg line="${source.dir}/MyApp-app.xml"/>\n    <arg line="-C ${output.dir} output.swf"/>\n</exec>\n')),(0,r.kt)("p",null,"As you have to use ",(0,r.kt)("inlineCode",{parentName:"p"},"adt.bat")," on Windows and ",(0,r.kt)("inlineCode",{parentName:"p"},"adt")," on macOS there is a useful Ant script we can use to select the appropriate executable:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},'\x3c!-- Simple condition to switch between adt.bat and adt --\x3e\n<condition property="isWindows" else="false">\n    <os family="windows" />\n</condition>\n<condition  property="air.adt" \n            value="${env.AIR_HOME}/bin/adt.bat" \n            else="${env.AIR_HOME}/bin/adt">\n    <istrue value="${isWindows}"/>\n</condition>\n')),(0,r.kt)("p",null,"In the following we compile our source using ",(0,r.kt)("inlineCode",{parentName:"p"},"mxmlc")," and then build an ",(0,r.kt)("inlineCode",{parentName:"p"},".air")," package from the ",(0,r.kt)("inlineCode",{parentName:"p"},"output.swf")," using the ",(0,r.kt)("inlineCode",{parentName:"p"},"MyApp-app.xml")," AIR application descriptor:  "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml",metastring:'title="build.xml"',title:'"build.xml"'},'<project name="air_example" default="build" >\n\n    <property environment="env."/>\n    <taskdef resource="flexTasks.tasks" classpath="${env.AIR_HOME}/ant"/>\n\n    <property name="output.dir" value="bin" />\n    <property name="source.dir" value="src" />\n    <property name="ane.dir" value="ane" />\n    <property name="ane.swc.dir" value="ane-swc" />\n\n    \x3c!-- Copy ANE files to the ane-swc and rename to .swc --\x3e\n    <target name="create-ane-swc">\n        <delete dir="${ane.swc.dir}" />\n        <copy todir="${ane.swc.dir}">\n            <fileset dir="${ane.dir}">\n                <include name="*.ane" />\n            </fileset>\n            <globmapper from="*.ane" to="*.swc"/>\n        </copy>\n    </target>\n\n    \x3c!-- Compile a swf from our code --\x3e\n    <target name="compile" depends="create-ane-swc" >\n        <mkdir dir="${output.dir}"/>\n        <mxmlc output="${output.dir}/output.swf" failonerror="true" maxmemory="1024m">\n            <load-config filename="${env.AIR_HOME}/frameworks/air-config.xml" />\n            <source-path path-element="${source.dir}"/>\n            <include-sources dir="${source.dir}" includes="*"/>\n            <external-library-path dir="${ane.swc.dir}" append="true"> \n                <include name="**/*.swc"/> \n            </external-library-path> \n        </mxmlc>\n        <delete dir="${ane.swc.dir}" />\n    </target>\n\n    \x3c!-- Simple condition to switch between adt.bat and adt --\x3e\n    <condition property="isWindows" else="false">\n        <os family="windows" />\n    </condition>\n    <condition property="air.adt" value="${env.AIR_HOME}/bin/adt.bat" else="${env.AIR_HOME}/bin/adt">\n        <istrue value="${isWindows}"/>\n    </condition>\n    \n    \x3c!-- Package an air from our code --\x3e\n    <target name="build" depends="compile">\n\n        <exec executable="${air.adt}" failonerror="true">\n            <arg line="-package"/>\n            <arg line="-storetype pkcs12"/>\n            <arg line="-keystore certificate.p12"/>\n            <arg line="-storepass ${password}"/>\n            <arg line="${output.dir}/MyApp.air"/>\n            <arg line="${source.dir}/MyApp-app.xml"/>\n            <arg line="-C ${output.dir} output.swf"/>\n        </exec>\n\n    </target>\n    \n</project>\n')))}c.isMDXComponent=!0},425:(e,n,t)=>{t.d(n,{Z:()=>o});var a=t(7294),r=t(6010);const i="tabItem_Ymn6";function o(e){let{children:n,hidden:t,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i,o),hidden:t},n)}},4259:(e,n,t)=>{t.d(n,{Z:()=>m});var a=t(7462),r=t(7294),i=t(6010),o=t(1048),l=t(3609),s=t(1943),p=t(2957);const u="tabList__CuJ",c="tabItem_LNqP";function d(e){var n;const{lazy:t,block:o,defaultValue:d,values:m,groupId:f,className:g}=e,k=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),v=m??k.map((e=>{let{props:{value:n,label:t,attributes:a}}=e;return{value:n,label:t,attributes:a}})),b=(0,l.l)(v,((e,n)=>e.value===n.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const h=null===d?d:d??(null==(n=k.find((e=>e.props.default)))?void 0:n.props.value)??k[0].props.value;if(null!==h&&!v.some((e=>e.value===h)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${h}" but none of its children has the corresponding value. Available values are: ${v.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:y,setTabGroupChoices:x}=(0,s.U)(),[w,N]=(0,r.useState)(h),$=[],{blockElementScrollPositionUntilNextRender:C}=(0,p.o5)();if(null!=f){const e=y[f];null!=e&&e!==w&&v.some((n=>n.value===e))&&N(e)}const E=e=>{const n=e.currentTarget,t=$.indexOf(n),a=v[t].value;a!==w&&(C(n),N(a),null!=f&&x(f,String(a)))},O=e=>{var n;let t=null;switch(e.key){case"ArrowRight":{const n=$.indexOf(e.currentTarget)+1;t=$[n]??$[0];break}case"ArrowLeft":{const n=$.indexOf(e.currentTarget)-1;t=$[n]??$[$.length-1];break}}null==(n=t)||n.focus()};return r.createElement("div",{className:(0,i.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":o},g)},v.map((e=>{let{value:n,label:t,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:w===n?0:-1,"aria-selected":w===n,key:n,ref:e=>$.push(e),onKeyDown:O,onFocus:E,onClick:E},o,{className:(0,i.Z)("tabs__item",c,null==o?void 0:o.className,{"tabs__item--active":w===n})}),t??n)}))),t?(0,r.cloneElement)(k.filter((e=>e.props.value===w))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},k.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==w})))))}function m(e){const n=(0,o.Z)();return r.createElement(d,(0,a.Z)({key:String(n)},e))}}}]);